<resources>
    <string name="app_name">ANDITER</string>

    <string name="CRC_Check_Code">1359529422</string>

    <string name="hello_blank_fragment">test</string>

    <string name="bottom_sheet_rooting_title">Rooting</string>
    <string name="bottom_sheet_debugger_title">Debugging</string>
    <string name="bottom_sheet_emulator_title">Emulator</string>
    <string name="bottom_sheet_frida_title">Frida</string>
    <string name="bottom_sheet_pinning_title">Pinning</string>
    <string name="bottom_sheet_integrity_title">Integrity</string>
    <string name="bottom_sheet_fingerprint_title">Fingerprint</string>
    <string name="bottom_sheet_dynamic_title">Fingerprint</string>
    <string name="bottom_sheet_native_title">Native</string>

    <string-array name="bottom_sheet_rooting_content">
        <item>
            [ 개요 ]\n
            디바이스 루팅 시 사용할 수 있는 패키지들이 존재합니다.\n
            해당 패키지들은 특정 동작을 수행 하기 위해 루트 권한을 획득해야 하는데 이때, 설치된 패키지에서 명령어 또는 정보를 가지고 옵니다.
            또한, 몇몇 패키지들은 앱 실행을 위해서 루트 권한을 요구하기도 합니다.\n
            \&quot;Bypass Pacakges\&quot; 항목에서는 위에서 설명한 대표적인 패키지들을 검사하게 됩니다.\n
            \n[ 대표 패키지 ]\n
            - com.kingroot.kinguser\n
            - com.topjohnwu.magisk\n
            - org.blackmart.market 등\n
        </item>
        <item>
            [ 개요 ]\n
            디바이스 루팅 시 특정 바이너리 파일들이 설치됩니다.\n
            이러한 바이너리 파일들은 특정 앱들이 루트 권한을 획득하거나, 시스템 명령어 동작을 위해 사용됩니다.
            \&quot;Bypass Binaries\&quot; 항목에서는 루팅 시 설치되는 대표적인 바이너리 파일들을 검사하게 됩니다.\n
            \n[ 대표 바이너리 파일 ]\n
            - su\n
            - busybox\n
            - magisk 등\n
        </item>
        <item>
            [ 개요 ]\n
            루팅된 디바이스에서 루트 권한 획득을 위해서는 SU 명령어를 실행해야 합니다.
            명령어 바이너리 파일들은 주로 bin 디렉터리 하위에 위치하고 있습니다.
            \&quot;Bypass Command Execution\&quot;항목에서는 이러한 특징을 이용해 which 명령어를 통해 SU 명령어가 존재하는지 검사하게 됩니다.\n
            \n[ which 명령어란? ]\n
            - which는 특정 명령어(바이너리 파일)의 위치를 찾아주는 명령어이다.\n
        </item>
        <item>
            [ 개요 ]\n
            build.prop 파일에는 안드로이드 시스템 정보가 저장되어 있습니다.
            이 중 ro.build.keys 태그에는 안드로이드의 빌트 테스트 키 값이 저장되며,
            몇몇 디바이스에서는 루팅 시 해당 키 값이 test-keys로 저장되는 특징이 있습니다.
            \&quot;Bypass Build-Tags\&quot; 항목에서는 build.prop 파일을 확인해 test-keys 값이 존재하는지 검사하게 됩니다.\n
            \n[ ro.build.keys 확인하는 방법 ]\n
            - cat /system/build.prop\n
            - getprop\n
        </item>
        <item>
            [ 개요 ]\n
            안드로이드 디바이스에서는 중요 디렉터리에 쓰기 권한이 제한되어 있습니다.
            하지만, 디바이스 루팅 시 이러한 디렉터리에 쓰기 권한을 부여하는 경우가 있습니다.
            \&quot;Bypass Writeable\&quot; 항목에서는 특정 디렉터리에 쓰기 권한이 부여되어 있는지 검사하게 됩니다.\n
            \n[ 검사 디렉터리 ]\n
            - /system\n
            - /vender\n
            - /etc 등\n
        </item>
        <item>
            [ 개요 ]\n
            build.prop 파일에는 안드로이드 시스템 정보가 저장되어 있습니다.
            이 중 ro.secure, ro.adb.secure 태그에는 부팅 이미지의 보안 설정 값이 저장되어 있습니다.
            몇몇 루팅 프로그램에서는 부팅 이미지를 편집할 때 ro.secure, ro.adb.secure 태그 값을 수정하는 경우가 있습니다.
            \&quot;Bypass System Property\&quot; 항목에서는 위 태그들을 확인해 비정상 값이 설정되어 있는지 검사하게 됩니다.\n
            \n[ ro.secure 확인하는 방법 ]\n
            - cat /default.prop\n
            - getprop\n
        </item>
        <item>
            [ 개요 ]\n
            디바이스 루팅 시 또는 루트 권한 획득 시 특정 실행 파일들이 백그라운드에서 동작하게 됩니다.
            \&quot;Bypass Check Process\&quot; 항목에서는 백그라운드에서 실행중인 프로세스를 검사하게 됩니다.\n
            \n[ 대표 프로세스 ]\n
            - magiskd\n
            - su\n
        </item>
    </string-array>

    <string-array name="bottom_sheet_debugging_content">
        <item>
            [ 개요 ]\n
            디바이스 디버깅 시 프로세스 상태 필드 중 하나인 TracerPid 값이 해당 프로레스를 디버깅 하고 있는
            프로세스의 id 값을 표시하게 됩니다. 반대로, 디버깅 되고 있지 않다면 TracerPid 상태 필드 값은 0으로 고정되어 있습니다.
            \&quot;Bypass TracerPID\&quot; 항목에서는 TracerPid 상태 필드 값이 0으로 설정되어 있는지 검사하게 됩니다.\n
            \n[ TracerPid 확인하는 방법 ]\n
            - cat /proc/[pid]/status\n
        </item>
        <item>
            [ 개요 ]\n
            build.prop 파일에는 안드로이드 시스템 정보가 저장되어 있습니다.
            이 중 ro.debuggable 태그에는 디바이스가 디버깅 모드로 동작 중인지 확인하는 상태 값이 저장되어 있습니다.
            \&quot;Bypass Debuggable\&quot; 항목에서는 ro.debuggable 태그를 확인해 디버깅 모드가 활성화되어 있는지 검사하게 됩니다.\n
            \n[ ro.debuggable 확인하는 방법 ]\n
            - getprop
        </item>
        <item>
            [ 개요 ]\n
            대표적인 안드로이드 디버깅 도구로는 JEB, IDA, GDA, Ghidra가 있습니다. 이 중 JEB는 다른 디버깅 도구와 달리 별도의 에이전트를 사용하는게 아닌
            VM 방식을 사용해 TracerPid 값이 변하지 않습니다. 따라서, 이를 탐지하기 위해 JEB에서 디버깅 시 사용하는 라이브러리 파일을 탐지해야 합니다.
            \&quot;Bypass Debug Tools\&quot; 항목은 앱 실행 시 프로세스 정보를 확인해 특정 라이브러리가 동작 중인지 검사하게 됩니다.\n
            \n[ 프로세스 상태 값 확인하는 방법 ]\n
            - cat /proc/[PID]/cmdline\n
        </item>
        <item>
            [ 개요 ]\n
            디바이스에서 앱을 디버깅 하기 위해서는 개발자 모드가 활성화되어 있어야 합니다.
            하지만, 개발자 모드가 활성화되어 있다고 디버깅 한다고 판단할 수 없습니다.
            그래서 몇몇 앱들에서는 개발자 모드와 다른 탐지 로직을 묶어서 디버깅 탐지를 합니다.\n
            \&quot;Bypass Develop Mode\&quot; 항목에서는 개발자 모드가 활성화되어 있는지 검사하게 됩니다.\n
            \n[ 개발자 모드 활성화 ]\n
            - 설정 -> 휴대전화 정보 -> 소프트웨어 정보 -> 빌드번호 5번 이상 터치\n
        </item>
        <item>
            [ 개요 ]\n
            디바이스에서 앱을 디버깅 하기 위해서는 개발자 모드의 USB 디버깅이 활성화되어 있어야 합니다.
            \&quot;Bypass Debugging Mode\&quot; 항목에서는 USB 디버깅이 활성화되어 있는지 검사하게 됩니다.\n
            \n[ USB 디버깅 활성화 ]\n
            - 설정 -> 개발자 옵션 -> 디버깅 -> USB 디버깅\n
        </item>
        <item>
            [ 개요 ]\n
            보통 앱을 디버깅 할 때, JEB, IDA, GDA, Ghidra 도구를 사용합니다.
            그리고 이러한 도구들은 로컬 PC에서 동작하며, 디바이스와 연결을 위해서 USB를 사용하게 됩니다.
            \&quot;Bypass Connect USB\&quot; 항목에서는 USB 연결이 되어 있는지 검사하게 됩니다.
            하지만, USB 연결만 되어 있다고 디버깅 한다고 판단할 수 없습니다. 핸드폰 배터리 중전 시에도 USB를 사용하기 때문입니다.
            그래서 몇몇 앱들에서는 USB 연결 탐지와 다른 탐지 로직을 묶어서 디버깅을 탐지합니다.\n
        </item>
    </string-array>

    <string-array name="bottom_sheet_emulator_content">
        <item>
            [ 개요 ]\n
            애뮬레이터에는 간편 루팅, 시스템 커스텀 등 사용자 편의를 위한 많은 기능들이 존재합니다.
            때문에, 취약점 테스트, 앱 디버깅, 랩 구성 시 디바이스보다는 애뮬레이터를 사용하는 경우가 많습니다.
            \&quot;Bypass Build Setting\&quot; 항목에서는 애뮬레이터 Build 정보를 가지고와 모델명, 하드웨어 정보 등을
            확인해 애뮬레이터를 사용 중인지 검사하게 됩니다.\n
            \n[ 애뮬레이터 디폴트 Build 정보 ]\n
            - Build Model : google_sdk\n
            - Build Brand : nox 등\n
        </item>
        <item>
            [ 개요 ]\n
            애뮬레이터에는 간편 루팅, 시스템 커스텀 등 사용자 편의를 위한 많은 기능들이 존재합니다.
            때문에, 취약점 테스트, 앱 디버깅, 랩 구성 시 디바이스보다는 애뮬레이터를 사용하는 경우가 많습니다.
            \&quot;Bypass Default Files\&quot; 항목에서는 애뮬레이터 설치 시 제공되는 기본 파일들을 검사하게 됩니다.\n
            \n[ 애뮬레이터 디폴트 파일 ]\n
            - fstab.nox\n
            - /dev/qemu_pipe\n
            - init.qcom.rc 등\n
        </item>
        <item>
            [ 개요 ]\n
            애뮬레이터에는 간편 루팅, 시스템 커스텀 등 사용자 편의를 위한 많은 기능들이 존재합니다.
            때문에, 취약점 테스트, 앱 디버깅, 랩 구성 시 디바이스보다는 애뮬레이터를 사용하는 경우가 많습니다.
            \&quot;Bypass Packages\&quot; 항목에서는 애뮬레이터에서 사용되는 전용 마켓, 어플 패키지들을 검사하게 됩니다.\n
            \n[ 애뮬레이터 전용 패키지 ]\n
            - com.bluestacks\n
            - com.android.Calendar\n
            - com.mumu.store 등\n
        </item>
    </string-array>

    <string-array name="bottom_sheet_frida_content">
        <item>
            [ 개요 ]\n
            Frida는 Window, Linux, mac,Android, iOS 등의 운영체제의 네이티브 앱을 후킹하는데 사용되는 파이썬 라이브러리 도구입니다.
            주로 앱의 함수를 추적하거나, 코드 변조를 위해 사용됩니다.
            \&quot;Bypass File &amp; Path\&quot; 항목에서는 Frida 바이너리 파일과 실행 시 생성되는 디렉터리를 검사합니다.\n
            \n[ Frida 실행 시 생성되는 기본 디렉터리 ]\n
            - /data/local/tmp/re.frida.server\n
        </item>
        <item>
            [ 개요 ]\n
            Frida는 Window, Linux, mac,Android, iOS 등의 운영체제의 네이티브 앱을 후킹하는데 사용되는 파이썬 라이브러리 도구입니다.
            주로 앱의 함수를 추적하거나, 코드 변조를 위해 사용됩니다.
            \&quot;Bypass Port\&quot; 항목에서는 Frida 서버 포트가 열려 있는지 검사하게 됩니다.\n
            \n[ Frida 디폴트 포트 ]\n
            - 27042 포트\n
        </item>
        <item>
            [ 개요 ]\n
            Frida는 Window, Linux, mac,Android, iOS 등의 운영체제의 네이티브 앱을 후킹하는데 사용되는 파이썬 라이브러리 도구입니다.
            주로 앱의 함수를 추적하거나, 코드 변조를 위해 사용됩니다.
            \&quot;Bypass Module\&quot; 항목에서는 앱 프로세스 정보를 확인해 frida가 동작 중인지 검사하게 됩니다.\n
            \n[ 앱 프로세스 정보 확인하는 방법 ]\n
            - cat /proc/[pid]/maps\n
        </item>
        <item>
            [ 개요 ]\n
            Frida는 Window, Linux, mac,Android, iOS 등의 운영체제의 네이티브 앱을 후킹하는데 사용되는 파이썬 라이브러리 도구입니다.
            주로 앱의 함수를 추적하거나, 코드 변조를 위해 사용됩니다.
            \&quot;Bypass Pipe\&quot; 항목에서는 앱 파이프 정보를 확인해 frida가 동작 중인지 검사하게 됩니다.\n
             \n[ 앱 프로세스 정보 확인하는 방법 ]\n
            - netstat\n
        </item>
    </string-array>

    <string-array name="bottom_sheet_pinning_content">
        <item>
            [ 개요 ]\n
            SSL/TLS 암호화 통신은 중간자 공격(MITM)에 취약한 특성을 가지고 있는데 이를 예방하기 위해 나온 기법인 SSL/TLS Pinning 입니다.
            SSL/TLS Pinning은 클라이언트 단에 인증서를 고정하고 서버 인증서와 유효성 검사를 통해 인증서가 일치하는지 확인하는 기법입니다.
            이러한 기법은 주로 보안을 중요시 하는 금융권 앱, 개인정보를 다루는 앱 등에서 중간자 공격을 예방하기 위해 사용됩니다.
            \&quot;Bypass Pinning(Root CA)\&quot; 항목은 디바이스에서 신뢰하는 인증서를 사용 중인지 검사하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            SSL/TLS 암호화 통신은 중간자 공격(MITM)에 취약한 특성을 가지고 있는데 이를 예방하기 위해 나온 기법인 SSL/TLS Pinning 입니다.
            SSL/TLS Pinning은 클라이언트 단에 인증서를 고정하고 서버 인증서와 유효성 검사를 통해 인증서가 일치하는지 확인하는 기법입니다.
            이러한 기법은 주로 보안을 중요시 하는 금융권 앱, 개인정보를 다루는 앱 등에서 중간자 공격을 예방하기 위해 사용됩니다.
            \&quot;Bypass Pinning(Allow CA)\&quot; 항목은 서버에서 허용한 인증서 외 다른 인증서를 사용 중인지 검사하게 됩니다.\n
        </item>
    </string-array>

    <string-array name="bottom_sheet_integrity_content">
        <item>
            [ 개요 ]\n
            공격자는 앱 크래킹을 통해 앱 내의 주요 기능 코드들을 변조해 개발자가 의도치 않았던 동작을 수행시키게 만들 수 있습니다.
            대표적인 일례로 유료 구독 서비스 이용, 리소스 복제, 모드 앱 제작이 있으며, 악성 앱처럼 정보 탈취 코드를 삽입 후 사설 마켓 및 SNS를 통해
            배포되는 경우도 있습니다.
            \&quot;Bypass App Nmae\&quot; 항목은 앱 이름을 확인해 앱이 변조 되었는지 검사하게 됩니다.\n
             \n[ 앱 이름 확인하는 방법 ]\n
            - Manifest.xml -> application 태그 -> android:label 값 확인
        </item>
        <item>
            [ 개요 ]\n
            공격자는 앱 크래킹을 통해 앱 내의 주요 기능 코드들을 변조해 개발자가 의도치 않았던 동작을 수행시키게 만들 수 있습니다.
            대표적인 일례로 유료 구독 서비스 이용, 리소스 복제, 모드 앱 제작이 있으며, 악성 앱처럼 정보 탈취 코드를 삽입 후 사설 마켓 및 SNS를 통해
            배포되는 경우도 있습니다.
            \&quot;Bypass Hash Key\&quot; 항목은 사이닝 키 값을 확인해 앱이 변조 되었는지 검사하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            공격자는 앱 크래킹을 통해 앱 내의 주요 기능 코드들을 변조해 개발자가 의도치 않았던 동작을 수행시키게 만들 수 있습니다.
            대표적인 일례로 유료 구독 서비스 이용, 리소스 복제, 모드 앱 제작이 있으며, 악성 앱처럼 정보 탈취 코드를 삽입 후 사설 마켓 및 SNS를 통해
            배포되는 경우도 있습니다.
            \&quot;Bypass Installer\&quot; 항목은 지정된 마켓 외 사설 마켓에서 앱을 다운로드 받았는지 검사하게 됩니다.\n
            \n[ 검사하는 마켓 종류 ]\n
            - 구글 플레이 스토어\n
            - 원 스토어\n
            - 갤럭시 앱스\n
            - 삼성 스마트 스위치\n
            - 삼성 메이트 등\n
        </item>
        <item>
            [ 개요 ]\n
            공격자는 앱 크래킹을 통해 앱 내의 주요 기능 코드들을 변조해 개발자가 의도치 않았던 동작을 수행시키게 만들 수 있습니다.
            대표적인 일례로 유료 구독 서비스 이용, 리소스 복제, 모드 앱 제작이 있으며, 악성 앱처럼 정보 탈취 코드를 삽입 후 사설 마켓 및 SNS를 통해
            배포되는 경우도 있습니다.
            \&quot;Bypass CRC\&quot; 항목은 classes.dex 파일의 체크섬을 확인해 앱이 변조 되었는지 검사하게 됩니다.\n
        </item>
    </string-array>

    <string-array name="bottom_sheet_dynamic_content">
        <item>
            [ 개요 ]\n
            보안 솔루션 및 악성 앱에서 주요 코드를 숨기고자 Dex 파일을 동적으로 로딩해 사용하는 경우가 있습니다.
            이때, 사용되는 클래스 및 함수가 DexFile.loadDex, DexClassLoader, PathClassLoader이며,
            앱 실행 시 assets 디렉터리 내에 위치한 Dex 파일을 읽어들여 필요한 함수를 호출하게 됩니다.
            이때, 추가 리소스 다운로드 기능을 통해 서버로부터 Dex 파일을 다운로드 받거나, 네이티브 코드를 통해 Dex 파일을
            생성하는 방법도 사용됩니다.
            \&quot;Bypass Dynamic Code\&quot; 항목은 동적으로 Dex 파일을 읽어들여 함수를 호출해 탐지 결과를 반영하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            보안 솔루션 및 악성 앱에서 주요 코드를 숨기고자 Dex 파일을 동적으로 로딩해 사용하는 경우가 있습니다.
            이때, 사용되는 클래스 및 함수가 DexFile.loadDex, DexClassLoader, PathClassLoader이며,
            앱 실행 시 assets 디렉터리 내에 위치한 Dex 파일을 읽어들여 필요한 함수를 호출하게 됩니다.
            이때, 추가 리소스 다운로드 기능을 통해 서버로부터 Dex 파일을 다운로드 받거나, 네이티브 코드를 통해 Dex 파일을
            생성하는 방법도 사용됩니다.
            \&quot;Bypass Hide Code\&quot; 항목은 동적으로 Dex 파일을 읽어들여 함수를 호출하고 결과를 반영 후 Dex 파일을 삭제하게 됩니다. \n
        </item>
    </string-array>

    <string-array name="bottom_sheet_native_content">
        <item>
            [ 개요 ]\n
            Java 코드로 작성된 탐지 기법은 코드 변조 및 Frida 도구를 통해 쉽게 우회 될 위험성이 있습니다.
            이를 위한 대응 방안으로 네이티브 C/C++ 코드로 작성하는 기법이 있으며, 이는 공격자의 분석 소요 시간을 늘리며
            우회를 쉽게 하지 못하도록 합니다.\n\n
            \&quot;Bypass Natvie(Rooting-Files)\&quot; 항목은 기존 Java 코드에서 루팅 관련 파일 탐지 기법을 네이티브 코드로 작성해
            Java 단에서 탐지하는게 아닌 별도의 C/C++ 라이브러리 파일을 호출해 탐지하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            Java 코드로 작성된 탐지 기법은 코드 변조 및 Frida 도구를 통해 쉽게 우회 될 위험성이 있습니다.
            이를 위한 대응 방안으로 네이티브 C/C++ 코드로 작성하는 기법이 있으며, 이는 공격자의 분석 소요 시간을 늘리며
            우회를 쉽게 하지 못하도록 합니다.\n\n
            \&quot;Bypass Natvie(Rooting-Excution)\&quot; 항목은 기존 Java 코드에서 witch 명령어를 이용한 SU 실행 여부 탐지 기법을 네이티브 코드로 작성해
            Java 단에서 탐지하는게 아닌 별도의 C/C++ 라이브러리 파일을 호출해 탐지하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            Java 코드로 작성된 탐지 기법은 코드 변조 및 Frida 도구를 통해 쉽게 우회 될 위험성이 있습니다.
            이를 위한 대응 방안으로 네이티브 C/C++ 코드로 작성하는 기법이 있으며, 이는 공격자의 분석 소요 시간을 늘리며
            우회를 쉽게 하지 못하도록 합니다.\n\n
            \&quot;Bypass Natvie(Debug-Debuggable)\&quot; 항목은 기존 Java 코드에서 ro.debuggable 이상 값 여부 탐지 기법을 네이티브 코드로 작성해
            Java 단에서 탐지하는게 아닌 별도의 C/C++ 라이브러리 파일을 호출해 탐지하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            Java 코드로 작성된 탐지 기법은 코드 변조 및 Frida 도구를 통해 쉽게 우회 될 위험성이 있습니다.
            이를 위한 대응 방안으로 네이티브 C/C++ 코드로 작성하는 기법이 있으며, 이는 공격자의 분석 소요 시간을 늘리며
            우회를 쉽게 하지 못하도록 합니다.\n\n
            \&quot;Bypass Natvie(Debug-TracerPID)\&quot; 항목은 기존 Java 코드에서 TracerPid 이상 값 여부 기법을 네이티브 코드로 작성해
            Java 단에서 탐지하는게 아닌 별도의 C/C++ 라이브러리 파일을 호출해 탐지하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            Java 코드로 작성된 탐지 기법은 코드 변조 및 Frida 도구를 통해 쉽게 우회 될 위험성이 있습니다.
            이를 위한 대응 방안으로 네이티브 C/C++ 코드로 작성하는 기법이 있으며, 이는 공격자의 분석 소요 시간을 늘리며
            우회를 쉽게 하지 못하도록 합니다.\n\n
            \&quot;Bypass Natvie(Frida-Files)\&quot; 항목은 기존 Java 코드에서 Frida 관련 파일 탐지 기법을 네이티브 코드로 작성해
            Java 단에서 탐지하는게 아닌 별도의 C/C++ 라이브러리 파일을 호출해 탐지하게 됩니다.\n
        </item>
        <item>
            [ 개요 ]\n
            Java 코드로 작성된 탐지 기법은 코드 변조 및 Frida 도구를 통해 쉽게 우회 될 위험성이 있습니다.
            이를 위한 대응 방안으로 네이티브 C/C++ 코드로 작성하는 기법이 있으며, 이는 공격자의 분석 소요 시간을 늘리며
            우회를 쉽게 하지 못하도록 합니다.\n\n
            \&quot;Bypass Natvie(Frida-Port)\&quot; 항목은 기존 Java 코드에서 Frida 통신 포트 리스닝 여부 탐지 기법을 네이티브 코드로 작성해
            Java 단에서 탐지하는게 아닌 별도의 C/C++ 라이브러리 파일을 호출해 탐지하게 됩니다.\n
        </item>
    </string-array>
</resources>